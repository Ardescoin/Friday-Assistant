import os
os.environ['PYGAME_HIDE_SUPPORT_PROMPT'] = '1'
import threading
import pystray
from PIL import Image
import customtkinter as ctk
import sys
import ctypes
import queue
from core.speech_recognition import SpeechRecognition
from core.icon import update_icon_color
from assistant import Client

def resource_path(relative_path):
    if getattr(sys, 'frozen', False):
        return os.path.join(sys._MEIPASS, relative_path)
    return os.path.join(os.path.abspath("."), relative_path)

def hide_console():
    hwnd = ctypes.windll.kernel32.GetConsoleWindow()
    if hwnd:
        ctypes.windll.user32.ShowWindow(hwnd, 0)

def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False

def main():
    if not is_admin():
        ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, f'"{sys.argv[0]}" --hide-console', None, 1)
        sys.exit()

    command_result_queue = queue.Queue()
    sr = SpeechRecognition(command_result_queue, device_index=1)
    client = Client(sr, command_result_queue)

    listener_thread = threading.Thread(target=client.start_listener, daemon=True)
    listener_thread.start()

    ctk.set_appearance_mode("dark")
    ctk.set_default_color_theme("green")
    root = ctk.CTk()
    root.title("Friday")
    root.geometry("400x200")
    root.resizable(width=False, height=False)

    status_label = ctk.CTkLabel(master=root, text="Ассистент запущен", font=("Arial", 16))
    status_label.pack(pady=20)
    output_text = ctk.CTkTextbox(master=root, width=350, height=100, font=("Arial", 12), state="disabled")
    output_text.pack(pady=10)

    def update_output(text):
        output_text.configure(state="normal")
        output_text.delete("1.0", "end")
        output_text.insert("1.0", text)
        output_text.configure(state="disabled")

    def poll_queue():
        try:
            while True:
                response = command_result_queue.get_nowait()
                update_output(response)
        except queue.Empty:
            pass
        root.after(100, poll_queue)

    poll_queue()

    minimize_to_tray = [False]

    def on_closing():
        dialog = ctk.CTkToplevel(root)
        dialog.title("Friday")
        dialog.geometry("300x150")
        dialog.transient(root)
        dialog.grab_set()
        label = ctk.CTkLabel(dialog, text="Свернуться в трей?", font=("Arial", 14))
        label.pack(pady=20)
        def minimize():
            minimize_to_tray[0] = True
            dialog.destroy()
            root.destroy()
        def exit_app():
            minimize_to_tray[0] = False
            dialog.destroy()
            root.destroy()
        minimize_button = ctk.CTkButton(dialog, text="Да", command=minimize)
        minimize_button.pack(pady=5)
        exit_button = ctk.CTkButton(dialog, text="Нет", command=exit_app)
        exit_button.pack(pady=5)

    root.protocol("WM_DELETE_WINDOW", on_closing)
    root.mainloop()

    if minimize_to_tray[0]:
        icon_image = Image.open(resource_path("ico/inactive.ico"))
        icon = pystray.Icon("test_icon", icon_image, "Voice Assistant", menu=pystray.Menu(
            pystray.MenuItem("Quit", lambda icon_obj, item: client.on_quit())
        ))
        color_thread = threading.Thread(target=update_icon_color, args=(icon, client.stop_event, client.voice_input_active), daemon=True)
        color_thread.start()
        icon.run()
    else:
        client.on_quit()

    listener_thread.join()
    print("Программа завершена.")

if __name__ == "__main__":
    main()

telegram_bot

import asyncio
import time
import pytz
from datetime import datetime
import g4f
import requests
import aiohttp
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
import os
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

BASE_URL = "http://46.29.160.114:8000"
TOKEN = "7295154693:AAFGkc8kzvNxMqRW8Wo5SonvMvVH_lzANw0"

class TelegramBot:
    def __init__(self):
        logger.info("Инициализация TelegramBot")
        self.application = Application.builder().token(TOKEN).build()
        self.pc_active = False
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_handler(MessageHandler(filters.Document.ALL, self.handle_file))
        self.application.job_queue.run_once(self.start_background_tasks, 0)

    async def start_background_tasks(self, context: ContextTypes.DEFAULT_TYPE):
        asyncio.create_task(self.background_pc_status_check())

    async def background_pc_status_check(self):
        async with aiohttp.ClientSession() as session:
            while True:
                try:
                    async with session.get(f"{BASE_URL}/pc/status", timeout=10) as response:
                        if response.status == 200:
                            self.pc_active = (await response.json()).get("active", False)
                        else:
                            self.pc_active = False
                    logger.info(f"Статус ПК: {'активен' if self.pc_active else 'не активен'}")
                except aiohttp.ClientError as e:
                    self.pc_active = False
                    logger.error(f"Ошибка подключения к серверу: {str(e)}")
                await asyncio.sleep(5)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.message.chat_id
        command = update.message.text.strip()
        command_lower = command.lower()
        logger.info(f"Получена команда от {chat_id}: {command}")

        is_image_command = any(keyword in command_lower for keyword in ["сгенерируй", "нарисуй"])
        is_file_command = command_lower.startswith("отправить файл ")

        try:
            response = requests.post(f"{BASE_URL}/pc/command", json={"command": command}, timeout=5)
            if response.status_code == 200:
                response_data = response.json()
                if response_data.get("status") == "no_command":
                    await update.message.reply_text("Сэр, нет активных команд.")
                    return
                command_id = response_data.get("command_id")
                for _ in range(30):
                    resp = requests.get(f"{BASE_URL}/pc/response/{command_id}", timeout=5)
                    if resp.status_code == 200:
                        result = resp.json()
                        response_text = result.get("response")
                        if is_image_command and "изображение создано" in response_text.lower():
                            filename = response_data.get("filename")
                            if filename:
                                file_response = requests.get(f"{BASE_URL}/pc/get_file/{filename}", timeout=10)
                                if file_response.status_code == 200:
                                    with open(f"temp_{filename}", "wb") as f:
                                        f.write(file_response.content)
                                    with open(f"temp_{filename}", "rb") as photo:
                                        await update.message.reply_photo(photo=photo, caption=response_text)
                                    os.remove(f"temp_{filename}")
                                else:
                                    await update.message.reply_text(f"Ошибка скачивания изображения: {file_response.status_code}")
                            else:
                                await update.message.reply_text(response_text)
                        else:
                            await update.message.reply_text(response_text)
                        return
                    await asyncio.sleep(1)
                await update.message.reply_text("Сэр, ПК не ответил вовремя.")
            else:
                await update.message.reply_text(f"Ошибка сервера: {response.status_code}")
        except requests.exceptions.RequestException as e:
            logger.error(f"Ошибка соединения с сервером: {e}")
            await update.message.reply_text(f"Не удалось связаться с сервером: {str(e)}")

    async def handle_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.message.chat_id
        file = update.message.document
        logger.info(f"Получен файл от {chat_id}: {file.file_name}")

        temp_file = f"temp_{file.file_name}"
        try:
            file_info = await context.bot.get_file(file.file_id)
            await file_info.download_to_drive(temp_file)
            logger.info(f"Файл скачан локально: {temp_file}")
            with open(temp_file, "rb") as f:
                files = {"file": (file.file_name, f, "application/octet-stream")}
                response = requests.post(f"{BASE_URL}/pc/receive_file", files=files, timeout=10)
            if response.status_code == 200:
                await update.message.reply_text(response.json().get("status"))
            else:
                await update.message.reply_text(f"Ошибка сохранения файла: {response.status_code}")
        except Exception as e:
            await update.message.reply_text(f"Ошибка обработки файла: {str(e)}")
        finally:
            if os.path.exists(temp_file):
                os.remove(temp_file)

    def run(self):
        logger.info("Запускаю run_polling")
        self.application.run_polling()

if __name__ == "__main__":
    logger.info("Запуск основного блока")
    bot = TelegramBot()
    bot.run()


server.py

from fastapi import FastAPI, HTTPException, Request, UploadFile, File
from pydantic import BaseModel
from contextlib import asynccontextmanager
import uuid
import time
import sqlite3
import os
import edge_tts
from fastapi.responses import FileResponse
import asyncio
import requests
import g4f
import datetime
import pytz
import io
import sys

@asynccontextmanager
async def lifespan(app: FastAPI):
    init_db()
    yield

app = FastAPI(lifespan=lifespan)

DB_PATH = "/root/server/db/neural_network_memory.db"
FILES_DIR = "/root/server/files"
AUDIO_DIR = "/root/server/audio"
BASE_URL = "http://46.29.160.114:8000"

def init_db():
    os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
    os.makedirs(FILES_DIR, exist_ok=True)
    os.makedirs(AUDIO_DIR, exist_ok=True)
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS interactions
                 (timestamp REAL, command TEXT, response TEXT, prompt TEXT, image_prompt TEXT)''')
    conn.commit()
    conn.close()

pc_status = {"active": False}
command_queue = {}
file_queue = []

class CommandRequest(BaseModel):
    command: str

class ResponseRequest(BaseModel):
    command_id: str
    response: str
    code: str | None = None

class InteractionRequest(BaseModel):
    command: str
    prompt: str
    response: str
    image_prompt: str | None = None

class TTSRequest(BaseModel):
    text: str

class FileSendRequest(BaseModel):
    filename: str

@app.post("/pc/status")
async def update_pc_status(status: dict):
    was_active = pc_status["active"]
    pc_status["active"] = status.get("active", False)
    if pc_status["active"] and not was_active:
        for file_data in file_queue:
            await notify_file_to_pc(file_data["filename"])
    return {"status": "PC status updated", "active": pc_status["active"]}

@app.get("/pc/status")
async def get_pc_status():
    return {"active": pc_status["active"]}

async def generate_code(command):
    try:
        prompt = f"""
        Generate Python code to execute the following command: {command}.
        The code should be safe, executable, and return a string output.
        Do not include any markdown formatting (e.g., ```python).
        If the command is not clear or cannot be translated to code, return an empty string.
        """
        response = g4f.ChatCompletion.create(
            model="gpt-4o",
            messages=[{'role': 'user', 'content': prompt}]
        )
        return response.strip() if response else ""
    except Exception as e:
        print(f"Ошибка генерации кода: {e}")
        return ""

async def generate_tts(text):
    try:
        audio_file = f"{AUDIO_DIR}/{uuid.uuid4()}.mp3"
        communicate = edge_tts.Communicate(text, "ru-RU-SvetlanaNeural", rate="+12%")
        await communicate.save(audio_file)
        return audio_file
    except Exception as e:
        print(f"Ошибка генерации TTS: {e}")
        return None

async def fetch_web_data(query):
    async with aiohttp.ClientSession() as session:
        if "погода" in query.lower():
            city = "Kazan"
            url = f"https://wttr.in/{city}?format=%C+%t+%w"
            try:
                async with session.get(url, timeout=5) as response:
                    if response.status == 200:
                        return (await response.text()).strip()
                    return "Не удалось получить данные о погоде"
            except aiohttp.ClientError as e:
                print(f"Ошибка подключения при запросе погоды: {str(e)}")
                return f"Ошибка подключения: {str(e)}"
        return None

async def generate_image(prompt):
    try:
        response = await asyncio.get_event_loop().run_in_executor(
            None,
            lambda: g4f.Client().images.generate(
                model="dall-e-3",
                prompt=prompt
            )
        )
        image_files = glob.glob(os.path.join(FILES_DIR, "*.png")) + \
                      glob.glob(os.path.join(FILES_DIR, "*.jpg")) + \
                      glob.glob(os.path.join(FILES_DIR, "*.jpeg"))
        if not image_files:
            print("No image files found")
            return None
        latest_image = max(image_files, key=os.path.getctime)
        return latest_image
    except Exception as e:
        print(f"Ошибка генерации изображения: {e}")
        return None

@app.post("/pc/command")
async def send_pc_command(request: CommandRequest, fastapi_request: Request):
    client_ip = fastapi_request.client.host
    command = request.command
    if pc_status["active"]:
        if command == "check":
            for command_id, cmd_data in list(command_queue.items()):
                if cmd_data["response"] is None:
                    return {"command_id": command_id, "command": cmd_data["command"], "status": "sent"}
            return {"status": "no_command"}
        else:
            command_id = str(uuid.uuid4())
            context = await get_interactions()
            is_image_command = any(keyword in command.lower() for keyword in ["сгенерируй", "нарисуй"])
            is_weather_command = "погода" in command.lower()
            is_file_command = command.lower().startswith("отправить файл ") or command.startswith("upload_file:")
            
            response = None
            code = None
            audio_file = None

            if is_image_command:
                image_path = await generate_image(command)
                if image_path and os.path.exists(image_path):
                    response = f"Сэр, изображение по запросу '{command}' создано!"
                    audio_file = await generate_tts(response)
                    os.remove(image_path)
                else:
                    response = "Сэр, не удалось сгенерировать изображение."
                    audio_file = await generate_tts(response)
            elif is_weather_command:
                web_data = await fetch_web_data(command)
                response = await post_response(command, context, web_data=web_data)
                audio_file = await generate_tts(response)
            elif is_file_command:
                if command.startswith("upload_file:"):
                    filename = command.replace("upload_file:", "").strip()
                    response = f"Файл {filename} запрошен для загрузки"
                else:
                    filename = command.replace("отправить файл ", "").strip()
                    response = f"Файл {filename} готов к отправке"
                audio_file = await generate_tts(response)
            else:
                code = await generate_code(command)
                if code:
                    response = "Код сгенерирован для выполнения на клиенте"
                else:
                    response = await post_response(command, context)
                audio_file = await generate_tts(response)

            audio_url = f"{BASE_URL}/audio/{os.path.basename(audio_file)}" if audio_file else None
            command_queue[command_id] = {
                "command": command,
                "response": response,
                "code": code,
                "audio_url": audio_url,
                "timestamp": time.time()
            }
            return {"command_id": command_id, "status": "sent"}
    else:
        raise HTTPException(status_code=503, detail="ПК не активен")

@app.post("/pc/response")
async def receive_pc_response(request: ResponseRequest):
    if request.command_id in command_queue:
        command_queue[request.command_id]["response"] = request.response
        if request.code:
            command_queue[request.command_id]["code_output"] = request.response
        return {"status": "Response received"}
    raise HTTPException(status_code=404, detail="Command ID not found")

@app.get("/pc/response/{command_id}")
async def get_pc_response(command_id: str):
    if command_id in command_queue and command_queue[command_id]["response"] is not None:
        return {
            "response": command_queue[command_id]["response"],
            "code": command_queue[command_id].get("code"),
            "audio_url": command_queue[command_id].get("audio_url")
        }
    raise HTTPException(status_code=404, detail="Response not ready or not found")

@app.get("/db/get_interactions")
async def get_interactions():
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("SELECT timestamp, command, response FROM interactions ORDER BY timestamp DESC LIMIT 5")
        rows = c.fetchall()
        if rows:
            context_lines = [f"Пользователь: {row[1]}\nПятница: {row[2]}" for row in rows]
            context = "\n".join(context_lines)
        else:
            context = "Контекст пока пуст"
        conn.close()
        return context
    except sqlite3.Error as e:
        raise HTTPException(status_code=500, detail=f"Ошибка базы данных: {str(e)}")

@app.post("/db/add_interaction")
async def add_interaction(request: InteractionRequest):
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("INSERT INTO interactions (timestamp, command, response, prompt, image_prompt) VALUES (?, ?, ?, ?, ?)",
                  (time.time(), request.command, request.response, request.prompt, request.image_prompt))
        conn.commit()
        conn.close()
        return {"status": "Interaction added"}
    except sqlite3.Error as e:
        raise HTTPException(status_code=500, detail=f"Ошибка базы данных: {str(e)}")

@app.get("/audio/{filename}")
async def get_audio(filename: str):
    file_path = os.path.join(AUDIO_DIR, filename)
    if not os.path.exists(file_path):
        raise HTTPException(status_code=404, detail="Аудиофайл не найден")
    return FileResponse(file_path, media_type="audio/mpeg", filename="response.mp3")

@app.post("/pc/receive_file")
async def receive_file_to_pc(file: UploadFile = File(...)):
    filename = file.filename
    temp_path = os.path.join(FILES_DIR, filename)
    try:
        with open(temp_path, "wb") as f:
            f.write(await file.read())
        file_queue.append({"filename": filename})
        if pc_status["active"]:
            await notify_file_to_pc(filename)
            return {"status": "Файл сохранён и отправлен на ПК", "filename": filename}
        return {"status": "Файл сохранён и ждёт активации ПК", "filename": filename}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Ошибка при сохранении файла: {str(e)}")

async def notify_file_to_pc(filename):
    command_id = str(uuid.uuid4())
    command_queue[command_id] = {
        "command": f"receive_file:{filename}",
        "response": None,
        "code": None,
        "audio_url": None,
        "timestamp": time.time()
    }

@app.post("/pc/upload_file")
async def upload_file_from_pc(file: UploadFile = File(...)):
    if not pc_status["active"]:
        raise HTTPException(status_code=503, detail="ПК не активен")
    filename = file.filename
    file_path = os.path.join(FILES_DIR, filename)
    try:
        with open(file_path, "wb") as f:
            f.write(await file.read())
        return {"status": "Файл успешно загружен на сервер", "filename": filename}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Ошибка при загрузке файла: {str(e)}")

@app.get("/pc/get_file/{filename}")
async def get_file(filename: str):
    file_path = os.path.join(FILES_DIR, filename)
    if not os.path.exists(file_path):
        raise HTTPException(status_code=404, detail=f"Файл {filename} не найден на сервере")
    return FileResponse(file_path, media_type="application/octet-stream", filename=filename)

@app.get("/pc/check_file_queue")
async def check_file_queue():
    if not pc_status["active"]:
        return {"files": [], "status": "ПК не активен"}
    files_to_send = [{"filename": file_data["filename"]} for file_data in file_queue]
    return {"files": files_to_send, "status": "Files available"}

@app.delete("/pc/remove_file/{filename}")
async def remove_file(filename: str):
    file_path = os.path.join(FILES_DIR, filename)
    try:
        if os.path.exists(file_path):
            os.remove(file_path)
            file_queue[:] = [f for f in file_queue if f["filename"] != filename]
            return {"status": f"Файл {filename} удалён с сервера"}
        raise HTTPException(status_code=404, detail=f"Файл {filename} не найден на сервере")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Ошибка удаления файла: {str(e)}")

async def post_response(command, context, web_data=None, response=None, image_prompt=None):
    timezone = pytz.timezone('Europe/Moscow')
    moscow_time = datetime.datetime.now(timezone).strftime("%Y-%m-%d %H:%M:%S")
    if not response:
        full_prompt = (
            "Ты голосовой ассистент по имени Пятница — энергичный, дружелюбный и немного остроумный собеседник. "
            "Обращайся ко мне как 'Сэр', будь неформальной и тёплой. "
            "Обязательно используй контекст моих последних фраз для связных и логичных ответов. "
            "Если запрос связан с погодой, используй данные из web_data как источник истины. "
            "Формат web_data: '<условия> <температура> <скорость ветра>', например, 'ясно +15°C 5 м/с'. "
            "Если web_data отсутствует, скажи: 'Сэр, не удалось получить данные о погоде. Чем ещё могу помочь?' "
            "На команды-действия без результата кода отвечай позитивно, предполагая успех. "
            "Отвечай без лишнего форматирования, только текст."
            f"\nКонтекст последних взаимодействий: {context}"
            f"\nМоя текущая фраза: {command}"
            f"\nДанные из интернета: {web_data}"
            f"\nТекущие дата и время: {moscow_time}"
            f"\nТекущее местоположение: Казань"
        )
        try:
            gpt_response = g4f.ChatCompletion.create(
                model="gpt-4o",
                messages=[{'role': 'user', 'content': full_prompt}]
            )
            response = gpt_response.strip()
        except Exception as e:
            response = f"Сэр, возникла ошибка: {e}"
    
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("INSERT INTO interactions (timestamp, command, response, prompt, image_prompt) VALUES (?, ?, ?, ?, ?)",
                  (time.time(), command, response, full_prompt, image_prompt))
        conn.commit()
        conn.close()
    except sqlite3.Error as e:
        print(f"Ошибка при записи в базу: {e}")
    
    return response

assistant
import threading
import queue
import requests
import os
import time
from mutagen.mp3 import MP3
import pygame
import io
import sys

BASE_URL = "http://46.29.160.114:8000"

class Client:
    def __init__(self, speech_recognition, command_result_queue):
        self.sr = speech_recognition
        self.command_result_queue = command_result_queue
        self.stop_event = threading.Event()
        self.voice_input_active = threading.Event()
        self.pc_files_dir = "files"
        os.makedirs(self.pc_files_dir, exist_ok=True)

    def play_audio(self, filepath):
        """Play an audio file and delete it afterward."""
        try:
            pygame.mixer.init()
            pygame.mixer.music.load(filepath)
            audio = MP3(filepath)
            pygame.mixer.music.play()
            time.sleep(audio.info.length)
            pygame.mixer.music.stop()
            os.remove(filepath)
            print(f"Аудио воспроизведено и удалено: {filepath}")
        except Exception as e:
            print(f"Ошибка воспроизведения аудио: {e}")
            self.command_result_queue.put(f"Ошибка воспроизведения аудио: {e}")

    def send_file_to_server(self, filename):
        """Send a file to the server."""
        file_path = os.path.join(self.pc_files_dir, filename)
        if os.path.exists(file_path):
            try:
                with open(file_path, "rb") as f:
                    files = {"file": (filename, f, "application/octet-stream")}
                    response = requests.post(f"{BASE_URL}/pc/upload_file", files=files, timeout=10)
                    if response.status_code == 200:
                        return response.json().get("status", "Файл загружен")
                    return f"Ошибка загрузки файла: {response.status_code}"
            except requests.exceptions.RequestException as e:
                return f"Ошибка соединения: {str(e)}"
        return f"Файл {filename} не найден в {self.pc_files_dir}"

    def receive_file_from_server(self, filename):
        """Receive a file from the server."""
        file_path = os.path.join(self.pc_files_dir, filename)
        try:
            response = requests.get(f"{BASE_URL}/pc/get_file/{filename}", timeout=10)
            if response.status_code == 200:
                with open(file_path, "wb") as f:
                    f.write(response.content)
                print(f"Файл {filename} скачан в {file_path}")
                return f"Файл {filename} получен"
            return f"Ошибка скачивания файла: {response.status_code}"
        except requests.exceptions.RequestException as e:
            return f"Ошибка соединения: {str(e)}"

    def execute_code(self, code):
        """Execute code received from the server."""
        try:
            if not code or not any(kw in code for kw in ("def ", "import ", "class ", "=")):
                return "Код пустой или не содержит исполняемых инструкций"
            compile(code, "<string>", "exec")
            old_stdout = sys.stdout
            redirected_output = sys.stdout = io.StringIO()
            exec_globals = {'print': print}
            exec(code, exec_globals)
            sys.stdout = old_stdout
            output = redirected_output.getvalue().strip()
            redirected_output.close()
            print(f"Захваченный вывод кода: {repr(output)}")
            return output if output else "Код выполнен успешно"
        except Exception as e:
            print(f"Ошибка выполнения кода: {e}")
            return f"Ошибка: {str(e)}"

    def start_listener(self):
        """Start listening for voice commands and process server responses."""
        self.sr.start_listening()
        self.voice_input_active.set()
        while not self.stop_event.is_set():
            try:
                command = self.sr.get_command()
                if command and command.strip() and "пятница" in command.lower():
                    response = requests.post(f"{BASE_URL}/pc/command", json={"command": command}, timeout=5)
                    if response.status_code == 200:
                        data = response.json()
                        command_id = data.get("command_id")
                        if command_id:
                            for _ in range(30):
                                resp = requests.get(f"{BASE_URL}/pc/response/{command_id}", timeout=5)
                                if resp.status_code == 200:
                                    result = resp.json()
                                    response_text = result.get("response")
                                    code = result.get("code")
                                    audio_url = result.get("audio_url")
                                    if audio_url:
                                        audio_response = requests.get(audio_url, timeout=5)
                                        if audio_response.status_code == 200:
                                            audio_path = "output.mp3"
                                            with open(audio_path, "wb") as f:
                                                f.write(audio_response.content)
                                            self.play_audio(audio_path)
                                    output = response_text
                                    if code:
                                        code_output = self.execute_code(code)
                                        output = code_output or response_text
                                    self.command_result_queue.put(output)
                                    break
                                time.sleep(1)
                            else:
                                self.command_result_queue.put("Сэр, ПК не ответил вовремя.")
                        else:
                            self.command_result_queue.put("Ошибка: нет command_id от сервера")
                    else:
                        self.command_result_queue.put(f"Ошибка сервера: {response.status_code}")
            except requests.exceptions.RequestException as e:
                print(f"Ошибка соединения с сервером: {e}")
                self.command_result_queue.put(f"Ошибка соединения: {str(e)}")
            time.sleep(0.1)

    def on_quit(self):
        """Stop the client and notify the server."""
        self.stop_event.set()
        self.sr.stop_listening()
        try:
            requests.post(f"{BASE_URL}/pc/status", json={"active": False}, timeout=5)
        except requests.exceptions.RequestException as e:
            print(f"Ошибка при уведомлении сервера о завершении: {e}")